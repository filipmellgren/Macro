{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Assignment 3\n",
    "By Chris Hayes, Ismael Moreno Martinez, Filip Mellgren.\n",
    "We present our replication in Jupyter notebook, meaning that the code is integrated with comments and equations we use to motivate our code. The final table is presented at the bottom.\n",
    "\n",
    "We begin by loading some packages into Python:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "os.chdir(\"/Volumes/GoogleDrive/Min enhet/Learning/MSc/Macro\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    " ## Data source\n",
    " Apx B points to a prepared data set, which we dowloaded from: \n",
    " https://www.sciencedirect.com/science/article/pii/S0304393208001402?via%3Dihub\n",
    " (Log in to ScienceDirect, download the spreadsheet under \"Extras\").\n",
    "\n",
    "\n",
    "Some slight manipulation were made in a google sheet to make it easier for the python console to read.\n",
    " These manipulations were: deleting empty rows at the top of the sheet\n",
    " and putting variable names at the top row, deleting the descriptor row\n",
    " \n",
    " ## Loading the data into Python\n",
    "We iterated over the sheets of the Excel file to create a data frame object for each sheet. We then added a multiindex so that we would have a meaningful unique identifier for all combinations of countries and years. \n",
    "\n",
    "Next, we created a decade variable (since the analysis groups the data by decades)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# The data was stored with each country in a separate sheet, named the following:\n",
    "country_list = [\"AUS\", \"BEL\", \"AUT\", \"CAN\", \"FIN\", \"FRA\", \"GER\", \"ITA\", \"JAP\", \n",
    "             \"NETH\", \"UK\", \"US\", \"SPA\", \"SWE\", \"SWI\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# This loop loads the data into a dataframe and creates a multiindex based on\n",
    "# country identifier (from sheet name) and time.\n",
    "df = {}\n",
    "for country in country_list:\n",
    "    df[country] = pd.read_excel(\"ORRdata.xlsx\", sheet_name = country)\n",
    "    df[country][\"country\"] = country     \n",
    "    df[country] = df[country].dropna()\n",
    "    df[country][\"YEAR\"] = df[country][\"YEAR\"].astype(\"int32\")\n",
    "    df[country][\"YEAR\"] = pd.to_datetime(df[country][\"YEAR\"], \n",
    "      format=\"%Y\", errors=\"coerce\")\n",
    "    df[country] = df[country].set_index([\"YEAR\", \"country\"])\n",
    "\n",
    "data = pd.concat([df[\"AUS\"], df[\"BEL\"], df[\"AUT\"], df[\"CAN\"], df[\"FIN\"], \n",
    "                  df[\"FRA\"], df[\"GER\"], df[\"ITA\"], df[\"JAP\"],\n",
    "                  df[\"NETH\"], df[\"UK\"], df[\"US\"], df[\"SPA\"], df[\"SWI\"]], sort = True)\n",
    "\n",
    "data.sort_index(level=[\"country\", \"YEAR\",], ascending=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "####  Variable manipulation:\n",
    "# Turn the \"L = (H*E)/P\" variable into a numeric \"L\".\n",
    "# Non numeric values are set to missing:\n",
    "data[\"L\"] = pd.to_numeric(data[\"L = (H*E)/P\"], errors = \"coerce\")\n",
    "\n",
    "# Add a decade variable\n",
    "data[\"decade\"] = (data.index.get_level_values('YEAR').year//10)*10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Actual changes\n",
    "Having prepared the data set, we calculated actual changes to confirm that we thus far handled all the data correctly. These values can then be compared with the author's table 2. However, we don't fully replicate it since we save doing total change in interest of saving space. (However, this will be done for the model's predicted change)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>decade</th>\n",
       "      <th>1950</th>\n",
       "      <th>1960</th>\n",
       "      <th>1970</th>\n",
       "      <th>1980</th>\n",
       "      <th>1990</th>\n",
       "      <th>2000</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AUS</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.107071</td>\n",
       "      <td>-0.528191</td>\n",
       "      <td>0.486485</td>\n",
       "      <td>-0.008776</td>\n",
       "      <td>-0.053620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AUT</th>\n",
       "      <td>-0.028231</td>\n",
       "      <td>-1.033933</td>\n",
       "      <td>-1.143645</td>\n",
       "      <td>-0.224688</td>\n",
       "      <td>-0.532974</td>\n",
       "      <td>-0.161849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BEL</th>\n",
       "      <td>-0.704781</td>\n",
       "      <td>-1.028855</td>\n",
       "      <td>-1.640329</td>\n",
       "      <td>-0.736873</td>\n",
       "      <td>0.057143</td>\n",
       "      <td>0.438268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAN</th>\n",
       "      <td>-1.084085</td>\n",
       "      <td>0.181634</td>\n",
       "      <td>0.338432</td>\n",
       "      <td>0.700413</td>\n",
       "      <td>-0.156850</td>\n",
       "      <td>0.092977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIN</th>\n",
       "      <td>-15.277179</td>\n",
       "      <td>-1.153842</td>\n",
       "      <td>-0.449734</td>\n",
       "      <td>0.322126</td>\n",
       "      <td>-1.305430</td>\n",
       "      <td>-0.124704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRA</th>\n",
       "      <td>-0.609685</td>\n",
       "      <td>-0.626105</td>\n",
       "      <td>-1.468729</td>\n",
       "      <td>-1.525696</td>\n",
       "      <td>0.107569</td>\n",
       "      <td>-0.964999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GER</th>\n",
       "      <td>-0.648445</td>\n",
       "      <td>-1.089124</td>\n",
       "      <td>-1.553097</td>\n",
       "      <td>-1.203884</td>\n",
       "      <td>-0.740207</td>\n",
       "      <td>-0.692423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ITA</th>\n",
       "      <td>0.161532</td>\n",
       "      <td>-1.603804</td>\n",
       "      <td>-1.192142</td>\n",
       "      <td>-0.427014</td>\n",
       "      <td>-0.164458</td>\n",
       "      <td>1.196502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>JAP</th>\n",
       "      <td>0.397278</td>\n",
       "      <td>-0.390699</td>\n",
       "      <td>-0.470066</td>\n",
       "      <td>0.139538</td>\n",
       "      <td>-0.740117</td>\n",
       "      <td>-0.304357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NETH</th>\n",
       "      <td>-1.489188</td>\n",
       "      <td>-0.645465</td>\n",
       "      <td>-1.812341</td>\n",
       "      <td>-0.951497</td>\n",
       "      <td>1.396831</td>\n",
       "      <td>0.992968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SPA</th>\n",
       "      <td>0.164452</td>\n",
       "      <td>0.252559</td>\n",
       "      <td>-1.666232</td>\n",
       "      <td>-1.561282</td>\n",
       "      <td>0.852925</td>\n",
       "      <td>1.843915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SWI</th>\n",
       "      <td>-1.586407</td>\n",
       "      <td>-0.233372</td>\n",
       "      <td>-1.259467</td>\n",
       "      <td>0.309197</td>\n",
       "      <td>0.271399</td>\n",
       "      <td>-1.133471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UK</th>\n",
       "      <td>-0.389846</td>\n",
       "      <td>-0.415195</td>\n",
       "      <td>-1.173617</td>\n",
       "      <td>-0.218154</td>\n",
       "      <td>-0.339309</td>\n",
       "      <td>0.072769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>US</th>\n",
       "      <td>-1.008296</td>\n",
       "      <td>0.289206</td>\n",
       "      <td>-0.252282</td>\n",
       "      <td>0.732595</td>\n",
       "      <td>0.464760</td>\n",
       "      <td>-1.985514</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "decade        1950      1960      1970      1980      1990      2000\n",
       "country                                                             \n",
       "AUS            NaN  0.107071 -0.528191  0.486485 -0.008776 -0.053620\n",
       "AUT      -0.028231 -1.033933 -1.143645 -0.224688 -0.532974 -0.161849\n",
       "BEL      -0.704781 -1.028855 -1.640329 -0.736873  0.057143  0.438268\n",
       "CAN      -1.084085  0.181634  0.338432  0.700413 -0.156850  0.092977\n",
       "FIN     -15.277179 -1.153842 -0.449734  0.322126 -1.305430 -0.124704\n",
       "FRA      -0.609685 -0.626105 -1.468729 -1.525696  0.107569 -0.964999\n",
       "GER      -0.648445 -1.089124 -1.553097 -1.203884 -0.740207 -0.692423\n",
       "ITA       0.161532 -1.603804 -1.192142 -0.427014 -0.164458  1.196502\n",
       "JAP       0.397278 -0.390699 -0.470066  0.139538 -0.740117 -0.304357\n",
       "NETH     -1.489188 -0.645465 -1.812341 -0.951497  1.396831  0.992968\n",
       "SPA       0.164452  0.252559 -1.666232 -1.561282  0.852925  1.843915\n",
       "SWI      -1.586407 -0.233372 -1.259467  0.309197  0.271399 -1.133471\n",
       "UK       -0.389846 -0.415195 -1.173617 -0.218154 -0.339309  0.072769\n",
       "US       -1.008296  0.289206 -0.252282  0.732595  0.464760 -1.985514"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#### Actual change ####\n",
    "# Calculate change \n",
    "data[\"L_change\"] = (data[\"L\"] - data[\"L\"].shift(1))/(data[\"L\"].shift(1))\n",
    "\n",
    "# Calculate average change, grouping by decade and country\n",
    "table2 = data[\"L_change\"].groupby([data.index.get_level_values('country'), \n",
    "             data[\"decade\"]]).mean()\n",
    "    \n",
    "table2.unstack()*100 # Result for actual changes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "The values look fine, meaning that we are on the right track. Let's move on to replicate the predicted changes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Predicted change\n",
    "From here on, we focus on deriving the model predicted values. To begin with, we were given the following parameters:\n",
    "\n",
    "$\\bar{H} = 5110$, reflecting the potential to work 14 hours per day, 365 days per year.\n",
    "\n",
    "$\\gamma = 1$, is the elasticity between consumption and leisure. In a balanced equilibrium, it should be 1.\n",
    "\n",
    "$\\lambda = 1$ measures how households value government consumption. Having the value \"1\" means they value it as if it were their own consumption. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# We were given the following parameters:\n",
    "H_bar = 5110\n",
    "gamma = 1\n",
    "Lambda = 1\n",
    "\n",
    "# Store base year variables in a separate data frame for future use:\n",
    "# Base years. 1956 for all countries but Australia, for which it is 1960\n",
    "# tax wedge defined as (1-\"labour\")/(1+\"consumption\")\n",
    "\n",
    "base_var = data.loc[data.index.get_level_values('YEAR').year == 1956, \n",
    "                    [\"taxwedge\", \"GDP\", \"CONSUMPTION \", \n",
    "                     \"GOVT. EXP\", \"L\", \"TOT HRS\", \"POPULATION\"]]\n",
    "# Just for the special case, Australia:\n",
    "base_var_aus = data.loc[data.index.get_level_values('YEAR').year == 1960, \n",
    "                    [\"taxwedge\", \"GDP\", \"CONSUMPTION \", \n",
    "                     \"GOVT. EXP\", \"L\", \"TOT HRS\", \"POPULATION\"]]\n",
    "\n",
    "base_var_aus = base_var_aus.loc[base_var_aus.index.get_level_values(\"country\") == \"AUS\"]\n",
    "base_var = base_var.append(base_var_aus)\n",
    "\n",
    "# Need to get rid of time as index, redundant for this data frame.\n",
    "base_var = base_var.reset_index()\n",
    "base_var = base_var.set_index(\"country\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Calculate $\\bar{c}$: According to the authors \n",
    "\n",
    "\"that is equal to 5 percent of total US consumption in 1956.\" \n",
    "\n",
    "Unfortunately, they didn't tell us to adjust for population. We'll use the  following formula for country $i$:\n",
    "\n",
    "$$ \\bar{c_i} = 0.05 (C_{US,0} + G_{US,0}) \\frac{N_{i, 0}}{N_{US, 0}} $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "C_us0 = base_var.loc[base_var.index == \"US\", \"CONSUMPTION \"].iloc[0]\n",
    "G_us0 = base_var.loc[base_var.index == \"US\", \"GOVT. EXP\"].iloc[0]\n",
    "N_us0 = base_var.loc[base_var.index == \"US\", \"POPULATION\"].iloc[0]\n",
    "\n",
    "# Value for c_bar\n",
    "c_bar = 0.05*(C_us0 + G_us0)* base_var[\"POPULATION\"] /N_us0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Base period output to consumption is defined as:\n",
    "    $$\\frac{Y_0}{C_0 + \\lambda G_0 - \\bar{c}}$$\n",
    "Similarly, we can calculate the ratio for each $t$:\n",
    "        $$\\frac{Y_t}{C_t + \\lambda G_t - \\bar{c}} $$\n",
    "These are both used to calculate hours worked to hours of leisure:\n",
    "        $$\\frac{H_t^p} {(\\bar{H} - H_t^p)^{\\gamma}} = \\frac{1-\\tau_t}{1-\\tau_0}\\frac{\\frac{Y_0}{C_0 + \\lambda G_0 - \\bar{c}}}{\\frac{Y_t}{C_t + \\lambda G_t - \\bar{c}}} \\frac{H_0}{(\\bar{H}-H_0)^\\gamma}$$\n",
    "With $H_t^p$ being model predicted hours of work.\n",
    "We do this for all countries, hence the implementation is a vectorised version of the above.\n",
    "\n",
    "The tax wedge: $1-\\tau_t = \\frac{1-\\tau_{ht}}{1+\\tau_{ct}}$ \n",
    "is the ratio of what's left after the government has taxed your income to the price of a good after a consumption tax has been added. Luckily, this was already given in the data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Define variables we'll be working with (for clarity in formulas):\n",
    "C0 = base_var[\"CONSUMPTION \"]\n",
    "G0 = base_var[\"GOVT. EXP\"]\n",
    "Y0 = base_var[\"GDP\"]\n",
    "tw0 = base_var[\"taxwedge\"]\n",
    "H0 = base_var[\"L\"]\n",
    "YCG0 = (Y0)/(C0 + Lambda*G0 - c_bar) # Base period output to consumption ratio\n",
    "\n",
    "C = data[\"CONSUMPTION \"]\n",
    "G = data[\"GOVT. EXP\"]\n",
    "Y = data[\"GDP\"]\n",
    "tw = data[\"taxwedge\"]\n",
    "YCGt = (Y)/(C + G * Lambda - c_bar) # Output to consumption ratio at t for all t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Calculate the initial leisure to work variable: $$\\frac{H_0}{(\\bar{H}-H_0)^\\gamma}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "pct_work = H0/(H_bar - H0)**gamma # fraction worked to leisure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "We now have what we need to compute values predicted by the model: $$\\frac{H_t^p} {\\bar{H} - H_t^p}$$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "data[\"work_leisure_t\"] = (tw * YCGt)/(tw0 * YCG0) * pct_work \n",
    "data[\"work_leisure_t\"] = pd.to_numeric(data[\"work_leisure_t\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we solve for model predicted hours, exploiting the fact that we now know $\\frac{H_t^p} {\\bar{H} - H_t^p}$ (from the relationship above) and also know $\\bar{H}$:\n",
    "$$H_t^p = \\frac{\\frac{H_t^p} {\\bar{H} - H_t^p} \\bar{H}}{1 + \\frac{H_t^p} {\\bar{H} - H_t^p}} $$\n",
    "\n",
    "We then calculate predicted change for every time period (and country), group by country and decade and take the arithmetic average (because that's what the authors did). We then add a column for the entire period."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>decade</th>\n",
       "      <th>1960</th>\n",
       "      <th>1970</th>\n",
       "      <th>1980</th>\n",
       "      <th>1990</th>\n",
       "      <th>1956-2003</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AUS</th>\n",
       "      <td>-0.16</td>\n",
       "      <td>-0.86</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AUT</th>\n",
       "      <td>-0.70</td>\n",
       "      <td>-0.73</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>-0.68</td>\n",
       "      <td>-0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BEL</th>\n",
       "      <td>-0.76</td>\n",
       "      <td>-1.60</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>-0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAN</th>\n",
       "      <td>-0.74</td>\n",
       "      <td>0.08</td>\n",
       "      <td>-0.58</td>\n",
       "      <td>0.21</td>\n",
       "      <td>-0.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIN</th>\n",
       "      <td>-0.71</td>\n",
       "      <td>-0.70</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>-0.51</td>\n",
       "      <td>-0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRA</th>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.65</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>-0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GER</th>\n",
       "      <td>-0.65</td>\n",
       "      <td>-1.43</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-0.78</td>\n",
       "      <td>-0.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ITA</th>\n",
       "      <td>-0.70</td>\n",
       "      <td>-0.70</td>\n",
       "      <td>-1.70</td>\n",
       "      <td>-1.37</td>\n",
       "      <td>-0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>JAP</th>\n",
       "      <td>0.57</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>-0.65</td>\n",
       "      <td>-0.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NETH</th>\n",
       "      <td>-1.30</td>\n",
       "      <td>-1.59</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.42</td>\n",
       "      <td>-0.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SPA</th>\n",
       "      <td>-0.17</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>-1.25</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>-0.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SWI</th>\n",
       "      <td>-0.19</td>\n",
       "      <td>-0.78</td>\n",
       "      <td>0.25</td>\n",
       "      <td>-0.72</td>\n",
       "      <td>-0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UK</th>\n",
       "      <td>-0.68</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>US</th>\n",
       "      <td>-0.49</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>0.10</td>\n",
       "      <td>-0.20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "decade   1960  1970  1980  1990  1956-2003\n",
       "country                                   \n",
       "AUS     -0.16 -0.86 -0.33  0.14      -0.30\n",
       "AUT     -0.70 -0.73 -0.11 -0.68      -0.49\n",
       "BEL     -0.76 -1.60 -0.09 -0.25      -0.65\n",
       "CAN     -0.74  0.08 -0.58  0.21      -0.24\n",
       "FIN     -0.71 -0.70 -1.00 -0.51      -0.57\n",
       "FRA     -0.29 -0.65 -0.62 -0.28      -0.38\n",
       "GER     -0.65 -1.43 -0.13 -0.78      -0.68\n",
       "ITA     -0.70 -0.70 -1.70 -1.37      -0.92\n",
       "JAP      0.57 -0.64 -0.38 -0.65      -0.28\n",
       "NETH    -1.30 -1.59  0.80  0.42      -0.45\n",
       "SPA     -0.17 -1.00 -1.25 -0.21      -0.70\n",
       "SWI     -0.19 -0.78  0.25 -0.72      -0.38\n",
       "UK      -0.68 -0.07 -0.35 -0.06      -0.33\n",
       "US      -0.49  0.06 -0.32  0.10      -0.20"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solve for predicted hours:\n",
    "data[\"pred_hours\"] = data[\"work_leisure_t\"]*H_bar/(1 + data[\"work_leisure_t\"]) \n",
    "\n",
    "# Predict change in worked hours:\n",
    "data[\"pred_change\"] = (data[\"pred_hours\"] - data[\"pred_hours\"].shift(1))/(data[\"pred_hours\"] .shift(1))\n",
    "\n",
    "table3 = data[\"pred_change\"].groupby([data.index.get_level_values('country'), data[\"decade\"]]).mean()\n",
    "table3 = (table3.unstack()*100).round(2)\n",
    "\n",
    "# Need to add a column of average change between 1956 and 2003:\n",
    "data_post_1956 = data[data.index.get_level_values('YEAR').year > 1956]\n",
    "table3[\"1956-2003\"] = data_post_1956[\"pred_change\"].groupby(data_post_1956.index.get_level_values('country')).mean()\n",
    "table3[\"1956-2003\"] =  (table3[\"1956-2003\"]*100).round(2)\n",
    "\n",
    "# Remove redundant columns:\n",
    "table3 = table3[[1960, 1970, 1980, 1990, '1956-2003']]\n",
    "table3 = table3.sort_index()\n",
    "table3\n",
    "# Create an exportable table\n",
    "#print(table3.to_latex())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Apparently, everything looks fine but the values for Finland which are way off (Australia is slightly off as well). Eye balling the data we had at hands revealed that the L value for Finland had accidentally been coded as the population in the data. Imputing a more reasonable value (next period's value) using:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "data.set_value(data.L.idxmax(), \"L\", 1473.98)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "And then re running the whole code and recreate the table gives us something closer to what the authors found:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true,
    "raw_mimetype": "text/x-python",
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "H_bar = 5110\n",
    "gamma = 1\n",
    "Lambda = 1\n",
    "\n",
    "# Store base year variables in a separate data frame for future use:\n",
    "# Base years. 1956 for all countries but Australia, for which it is 1960\n",
    "# tax wedge defined as (1-\"labour\")/(1+\"consumption\")\n",
    "\n",
    "base_var = data.loc[data.index.get_level_values('YEAR').year == 1956, \n",
    "                    [\"taxwedge\", \"GDP\", \"CONSUMPTION \", \n",
    "                     \"GOVT. EXP\", \"L\", \"TOT HRS\", \"POPULATION\"]]\n",
    "# Just for the special case, Australia:\n",
    "base_var_aus = data.loc[data.index.get_level_values('YEAR').year == 1960, \n",
    "                    [\"taxwedge\", \"GDP\", \"CONSUMPTION \", \n",
    "                     \"GOVT. EXP\", \"L\", \"TOT HRS\", \"POPULATION\"]]\n",
    "\n",
    "base_var_aus = base_var_aus.loc[base_var_aus.index.get_level_values(\"country\") == \"AUS\"]\n",
    "base_var = base_var.append(base_var_aus)\n",
    "\n",
    "# Need to get rid of time as index, redundant for this data frame.\n",
    "base_var = base_var.reset_index()\n",
    "base_var = base_var.set_index(\"country\")\n",
    "\n",
    "# Calculate cbar: \"that is equal to 5 percent of total US consumption in 1956.\"\n",
    "# Adjust for population for all countries\n",
    "C_us0 = base_var.loc[base_var.index == \"US\", \"CONSUMPTION \"].iloc[0]\n",
    "G_us0 = base_var.loc[base_var.index == \"US\", \"GOVT. EXP\"].iloc[0]\n",
    "N_us0 = base_var.loc[base_var.index == \"US\", \"POPULATION\"].iloc[0]\n",
    "\n",
    "# Value for c_bar\n",
    "c_bar = 0.05*(C_us0 + G_us0)* base_var[\"POPULATION\"] /N_us0\n",
    "\n",
    "# Define variables we'll be working with (for clarity in formulas):\n",
    "C0 = base_var[\"CONSUMPTION \"]\n",
    "G0 = base_var[\"GOVT. EXP\"]\n",
    "Y0 = base_var[\"GDP\"]\n",
    "tw0 = base_var[\"taxwedge\"]\n",
    "H0 = base_var[\"L\"]\n",
    "YCG0 = (Y0)/(C0 + Lambda*G0 - c_bar) # Base period output to consumption ratio\n",
    "\n",
    "C = data[\"CONSUMPTION \"]\n",
    "G = data[\"GOVT. EXP\"]\n",
    "Y = data[\"GDP\"]\n",
    "tw = data[\"taxwedge\"]\n",
    "YCGt = (Y)/(C + G * Lambda - c_bar) # Output to consumption ratio at t for all t\n",
    "\n",
    "pct_work = H0/(H_bar - H0)**gamma # fraction worked to leisure\n",
    "\n",
    "data[\"work_leisure_t\"] = (tw * YCGt)/(tw0 * YCG0) * pct_work # Intuition for this?\n",
    "data[\"work_leisure_t\"] = pd.to_numeric(data[\"work_leisure_t\"])\n",
    "\n",
    "data[\"pred_hours\"] = data[\"work_leisure_t\"]*H_bar/(1 + data[\"work_leisure_t\"]) # Intuition?\n",
    "\n",
    "data[\"pred_change\"] = (data[\"pred_hours\"] - data[\"pred_hours\"].shift(1))/(data[\"pred_hours\"] .shift(1))\n",
    "\n",
    "table3 = data[\"pred_change\"].groupby([data.index.get_level_values('country'), data[\"decade\"]]).mean()\n",
    "table3 = (table3.unstack()*100).round(2)\n",
    "\n",
    "# Need to add a column of average change between 1956 and 2003:\n",
    "data_post_1956 = data[data.index.get_level_values('YEAR').year > 1956]\n",
    "table3[\"1956-2003\"] = data_post_1956[\"pred_change\"].groupby(data_post_1956.index.get_level_values('country')).mean()\n",
    "table3[\"1956-2003\"] =  (table3[\"1956-2003\"]*100).round(2)\n",
    "\n",
    "# Remove redundant columns:\n",
    "table3 = table3[[1960, 1970, 1980, 1990, '1956-2003']]\n",
    "table3 = table3.sort_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>decade</th>\n",
       "      <th>1960</th>\n",
       "      <th>1970</th>\n",
       "      <th>1980</th>\n",
       "      <th>1990</th>\n",
       "      <th>1956-2003</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AUS</th>\n",
       "      <td>-0.16</td>\n",
       "      <td>-0.86</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AUT</th>\n",
       "      <td>-0.70</td>\n",
       "      <td>-0.73</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>-0.68</td>\n",
       "      <td>-0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BEL</th>\n",
       "      <td>-0.76</td>\n",
       "      <td>-1.60</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>-0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAN</th>\n",
       "      <td>-0.74</td>\n",
       "      <td>0.08</td>\n",
       "      <td>-0.58</td>\n",
       "      <td>0.21</td>\n",
       "      <td>-0.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIN</th>\n",
       "      <td>-1.04</td>\n",
       "      <td>-0.98</td>\n",
       "      <td>-1.36</td>\n",
       "      <td>-0.67</td>\n",
       "      <td>-0.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRA</th>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.65</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>-0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GER</th>\n",
       "      <td>-0.65</td>\n",
       "      <td>-1.43</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-0.78</td>\n",
       "      <td>-0.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ITA</th>\n",
       "      <td>-0.70</td>\n",
       "      <td>-0.70</td>\n",
       "      <td>-1.70</td>\n",
       "      <td>-1.37</td>\n",
       "      <td>-0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>JAP</th>\n",
       "      <td>0.57</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>-0.65</td>\n",
       "      <td>-0.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NETH</th>\n",
       "      <td>-1.30</td>\n",
       "      <td>-1.59</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.42</td>\n",
       "      <td>-0.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SPA</th>\n",
       "      <td>-0.17</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>-1.25</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>-0.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SWI</th>\n",
       "      <td>-0.19</td>\n",
       "      <td>-0.78</td>\n",
       "      <td>0.25</td>\n",
       "      <td>-0.72</td>\n",
       "      <td>-0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UK</th>\n",
       "      <td>-0.68</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>US</th>\n",
       "      <td>-0.49</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>0.10</td>\n",
       "      <td>-0.20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "decade   1960  1970  1980  1990  1956-2003\n",
       "country                                   \n",
       "AUS     -0.16 -0.86 -0.33  0.14      -0.30\n",
       "AUT     -0.70 -0.73 -0.11 -0.68      -0.49\n",
       "BEL     -0.76 -1.60 -0.09 -0.25      -0.65\n",
       "CAN     -0.74  0.08 -0.58  0.21      -0.24\n",
       "FIN     -1.04 -0.98 -1.36 -0.67      -0.79\n",
       "FRA     -0.29 -0.65 -0.62 -0.28      -0.38\n",
       "GER     -0.65 -1.43 -0.13 -0.78      -0.68\n",
       "ITA     -0.70 -0.70 -1.70 -1.37      -0.92\n",
       "JAP      0.57 -0.64 -0.38 -0.65      -0.28\n",
       "NETH    -1.30 -1.59  0.80  0.42      -0.45\n",
       "SPA     -0.17 -1.00 -1.25 -0.21      -0.70\n",
       "SWI     -0.19 -0.78  0.25 -0.72      -0.38\n",
       "UK      -0.68 -0.07 -0.35 -0.06      -0.33\n",
       "US      -0.49  0.06 -0.32  0.10      -0.20"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We don't end up with perfect values for Finland and Australia – this is likely because of data issues since we end up with correct results for most countries."
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
