#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Oct 28 08:20:14 2018

@author: filip
"""
import pandas as pd

def steady_k(s, A, n, delta, theta):
    ''' Calculates the steady state level of capital'''
    k = ((s * A)/(n + delta))**(1/(1 - theta))
    return k

def growth_periods(step, k_steady_state, theta):
    ''' Calculates the number of periods an economy needs to grow between a 
    starting fraction of the steady state capital level, to an ending fraction 
    of the steady state capital level.
    '''
    k = growth_fraction[step] * k_steady_state
    i = 0
    while k < k_steady_state * growth_fraction[step + 1]: 
        k = 1/(1 + n)* (s * A * k**(theta) + (1- delta)*k)
        i = i+1
    return i

# Given parameters:
delta = 0.08 # Each period is a year
n = 0 # Population growth
s = 0.2 # Savings rate
theta = [0.1, 0.3, 0.5, 0.7, 0.9]
growth_fraction = [0.1, 0.6, 0.8, 0.9, 0.95, 0.975] # Will be used as intermediary
# steps. How many years to travel from one to the next?

# Create a data frame that we will populate with theta and k
df = pd.DataFrame({"theta":theta})

#### Question (a) ####
# Steady state value of capital, K
A = 1 # Total factor productivity
k_a = steady_k(s, A, n, delta, df["theta"]) # Steady states of k.
df["k_steady_state"] = k_a

for step in range(0, len(growth_fraction)-1):
    ''' Calculates time to travel from one step to the next for every economy 
    before proceeding to calculate the next level to the one after that.
    '''
    iterations = []
    for economy in [0,1,2,3,4]:
        periods = growth_periods(step, df["k_steady_state"].iloc[economy],
                                 df["theta"].iloc[economy])
        iterations.append(periods)
    df[str(growth_fraction[step]*100) + "% to " + 
       str(growth_fraction[step + 1]*100) + "%"] = iterations

print(df.to_latex(escape = False))
#### Question (b) ####
# Theta = 0.5 corresponds to economy 2 (first value being 0).
A = 2
k_b = steady_k(s, A, n, delta, 0.5)
iterations = []
for step in range(0, len(growth_fraction)-1):
    periods = growth_periods(step, k_b, 0.5)
    iterations.append(periods)
print(iterations)

A = 4
k_b2 = steady_k(s, A, n, delta, 0.5)
iterations2 = []
for step in range(0, len(growth_fraction)-1):
    periods = growth_periods(step, k_b2, 0.5)
    iterations2.append(periods)
